{"version":3,"sources":["components/TodosContainer.js","App.js","serviceWorker.js","reducers/todosReducer.js","actions/actionsTypes.js","reducers/rootReducer.js","index.js","store.js"],"names":["TodosContainer","props","handleChange","e","setState","inputValue","target","value","createTodo","key","axios","post","todo","title","then","response","todos","update","state","$splice","data","catch","error","console","log","updateTodo","id","put","done","checked","todoIndex","findIndex","x","$set","deleteTodo","delete","get","this","getTodos","className","type","placeholder","maxLength","onKeyPress","onChange","map","onClick","Component","App","Boolean","window","location","hostname","match","todosReducer","action","index","filter","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5456e96f.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport axios from 'axios'\nimport update from 'immutability-helper'\nclass TodosContainer extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      todos: [],\n      inputValue: ''\n    }\n  }\n\n  getTodos() {\n    axios.get('/api/v1/todos')\n    .then(response => {\n      this.setState({todos: response.data})\n    })\n    .catch(error => console.log(error))\n  }\n\n  componentDidMount() {\n    this.getTodos()\n  }\n\nhandleChange = (e) => {\n  this.setState({inputValue: e.target.value});\n}\n\ncreateTodo = (e) => {\n  if (e.key === 'Enter') {\n    axios.post('/api/v1/todos', {todo: {title: e.target.value}})\n    .then(response => {\n      const todos = update(this.state.todos, {\n        $splice: [[0, 0, response.data]]\n      })\n      this.setState({\n        todos: todos,\n        inputValue: ''\n      })\n    })\n    .catch(error => console.log(error))      \n  }    \n}\n\n\n  updateTodo = (e, id) => {\n    axios.put(`/api/v1/todos/${id}`, {todo: {done: e.target.checked}})\n    .then(response => {\n      const todoIndex = this.state.todos.findIndex(x => x.id === response.data.id)\n      const todos = update(this.state.todos, {\n        [todoIndex]: {$set: response.data}\n      })\n      this.setState({\n        todos: todos\n      })\n    })\n    .catch(error => console.log(error))      \n  }\n\n\n\n  deleteTodo = (id) => {\n    axios.delete(`/api/v1/todos/${id}`)\n    .then(response => {\n      const todoIndex = this.state.todos.findIndex(x => x.id === id)\n      const todos = update(this.state.todos, {\n        $splice: [[todoIndex, 1]]\n      })\n      this.setState({\n        todos: todos\n      })\n    })\n    .catch(error => console.log(error))\n  }\n  render() {\n    return (\n      <div>\n        <div className=\"inputContainer\">\n          <input className=\"taskInput\" type=\"text\" \n            placeholder=\"Add a task\" maxLength=\"50\"\n            onKeyPress={this.createTodo}\n            value={this.state.inputValue} onChange={this.handleChange} />\n             \n        </div>  \t    \n\t<div className=\"listWrapper\">\n\t   <ul className=\"taskList\">\n\t\t  {this.state.todos.map((todo) => {\n\t\t    return(\n\t\t      <li className=\"task\" todo={todo} key={todo.id}>\n\t\t\t<input className=\"taskCheckbox\" type=\"checkbox\" \n                         checked={todo.done}\n                         onChange = {(e) => this.updateTodo(e, todo.id)}/>              \n\t\t\t<label className=\"taskLabel\">{todo.title}</label>\n\t\t\t<span className=\"deleteTaskBtn\"\n                         onClick={(e) => this.deleteTodo(todo.id)}>x</span>\n\t\t      </li>\n\t\t    )       \n\t\t  })} \t    \n\t   </ul>\n\t</div>\n     </div>\n    )\n  }\n}\n\nexport default TodosContainer","import React, { Component } from 'react';\nimport './App.css';\nimport TodosContainer from './components/TodosContainer'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"header\">\n          <h1>Todo List</h1>\n        </div>\n        <TodosContainer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { LOAD_TODOS, ADD_TODO, TOGGLE_TODO, DELETE_TODO } from '/Users/meganwang/todo-api/todo-app/src/actions/actionsTypes.js'\n\nfunction todosReducer(state = [], action) \n{\n    switch(action.type) {\n        case LOAD_TODOS:\n            return action.todos;\n\n        case ADD_TODO:\n            return [\n                ...state,\n                {\n                    id: action.id,\n                    title: action.title,\n                    done: false\n                }\n            ];\n\n        case TOGGLE_TODO:\n            return state.map(todo => (todo.id === action.index) \n                  ? {...todo, done: !todo.done}\n                  : todo\n            );\n\n        case DELETE_TODO:\n            return state.filter(todo => todo.id !== action.index);\n\n        default:\n            return state;    \n    }\n}\n\nexport default todosReducer\n\n","export const LOAD_TODOS = 'LOAD_TODOS'\nexport const ADD_TODO = 'ADD_TODO'\nexport const TOGGLE_TODO = 'TOGGLE_TODO'\nexport const DELETE_TODO = 'DELETE_TODO'\n","import { combineReducers } from 'redux'\nimport todosReducer from './todosReducer'\n\nconst rootReducer = combineReducers({\n    todos: todosReducer\n});\n\nexport default rootReducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport configureStore from './store';\n\nconst store = configureStore();\nReactDOM.render(\n<Provider store={store}>\n<App />,\n</Provider>,\n document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers/rootReducer';\n\nexport default function configureStore() {\n  return createStore(\n    rootReducer,\n    applyMiddleware(thunk)\n  )\n}\n"],"sourceRoot":""}